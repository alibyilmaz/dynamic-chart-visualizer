// <auto-generated />
using System;
using DynamicChartApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DynamicChartApp.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250709195414_AddProductAndSalesWithSeed")]
    partial class AddProductAndSalesWithSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DynamicChartApp.Domain.Models.LogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("DynamicChartApp.Domain.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Electronics",
                            Name = "Laptop",
                            Price = 1200.00m,
                            Stock = 50
                        },
                        new
                        {
                            Id = 2,
                            Category = "Electronics",
                            Name = "Smartphone",
                            Price = 800.00m,
                            Stock = 120
                        },
                        new
                        {
                            Id = 3,
                            Category = "Furniture",
                            Name = "Desk Chair",
                            Price = 150.00m,
                            Stock = 75
                        },
                        new
                        {
                            Id = 4,
                            Category = "Appliances",
                            Name = "Coffee Maker",
                            Price = 90.00m,
                            Stock = 40
                        },
                        new
                        {
                            Id = 5,
                            Category = "Stationery",
                            Name = "Notebook",
                            Price = 5.00m,
                            Stock = 500
                        },
                        new
                        {
                            Id = 6,
                            Category = "Stationery",
                            Name = "Pen",
                            Price = 1.50m,
                            Stock = 1000
                        },
                        new
                        {
                            Id = 7,
                            Category = "Electronics",
                            Name = "Monitor",
                            Price = 300.00m,
                            Stock = 60
                        },
                        new
                        {
                            Id = 8,
                            Category = "Accessories",
                            Name = "Backpack",
                            Price = 45.00m,
                            Stock = 200
                        },
                        new
                        {
                            Id = 9,
                            Category = "Accessories",
                            Name = "Water Bottle",
                            Price = 15.00m,
                            Stock = 350
                        },
                        new
                        {
                            Id = 10,
                            Category = "Furniture",
                            Name = "Desk Lamp",
                            Price = 35.00m,
                            Stock = 80
                        });
                });

            modelBuilder.Entity("DynamicChartApp.Domain.Models.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Sales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            Quantity = 3,
                            SaleDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 3600.00m
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 2,
                            Quantity = 5,
                            SaleDate = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 4000.00m
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 3,
                            Quantity = 7,
                            SaleDate = new DateTime(2024, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 1050.00m
                        },
                        new
                        {
                            Id = 4,
                            ProductId = 4,
                            Quantity = 2,
                            SaleDate = new DateTime(2024, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 180.00m
                        },
                        new
                        {
                            Id = 5,
                            ProductId = 5,
                            Quantity = 50,
                            SaleDate = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 250.00m
                        },
                        new
                        {
                            Id = 6,
                            ProductId = 6,
                            Quantity = 100,
                            SaleDate = new DateTime(2024, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 150.00m
                        },
                        new
                        {
                            Id = 7,
                            ProductId = 7,
                            Quantity = 4,
                            SaleDate = new DateTime(2024, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 1200.00m
                        },
                        new
                        {
                            Id = 8,
                            ProductId = 8,
                            Quantity = 10,
                            SaleDate = new DateTime(2024, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 450.00m
                        },
                        new
                        {
                            Id = 9,
                            ProductId = 9,
                            Quantity = 20,
                            SaleDate = new DateTime(2024, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 300.00m
                        },
                        new
                        {
                            Id = 10,
                            ProductId = 10,
                            Quantity = 6,
                            SaleDate = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 210.00m
                        },
                        new
                        {
                            Id = 11,
                            ProductId = 1,
                            Quantity = 2,
                            SaleDate = new DateTime(2024, 5, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 2400.00m
                        },
                        new
                        {
                            Id = 12,
                            ProductId = 2,
                            Quantity = 3,
                            SaleDate = new DateTime(2024, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 2400.00m
                        },
                        new
                        {
                            Id = 13,
                            ProductId = 3,
                            Quantity = 5,
                            SaleDate = new DateTime(2024, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 750.00m
                        },
                        new
                        {
                            Id = 14,
                            ProductId = 4,
                            Quantity = 1,
                            SaleDate = new DateTime(2024, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 90.00m
                        },
                        new
                        {
                            Id = 15,
                            ProductId = 5,
                            Quantity = 100,
                            SaleDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 500.00m
                        });
                });

            modelBuilder.Entity("DynamicChartApp.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DynamicChartApp.Domain.Models.Sale", b =>
                {
                    b.HasOne("DynamicChartApp.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
